class Node {
        int x;
        Node next;
        
        Node(int x){
                this.x = x;
        }
}

class Main {
        public static void main (String[] args){
                
                Scanner sc = new Scanner (System.in);
                int n = sc.nextInt();
                
                Node head = null;
                Node temp = null;
                
                for(int i=0;   i<n;   i++){
                        int x = sc.nextInt();
                        
                        if(head == null){
                                head = new Node(x);
                                temp = head;
                        }
                        else{
                                temp.next = new Node(x);
                                temp = temp.next;
                        }        
                }
                
                System.out.println("given linked list is:");
                printList(head);
                System.out.println();
        
                System.out.println("reverse in k group: ");
                head = reverseGroup(head , 3);
                 printList(head);
                System.out.println();
                
                
                
                System.out.println("reversed list is: ");
                head = reverse(head);
                printList(head);
                 System.out.println();
                
              System.out.println("adding at last posiition:");
                head = addLast(head , 74638);
                printList(head);
                System.out.println();
                
                System.out.println("after deleting at last position: ");
                deleteLast(head);
                printList(head);
                System.out.println();
                
                System.out.println("adding at first position : ");
                head = addFirst (head , 73255);
                printList(head);
                System.out.println();
                
                System.out.println("deleting at first position : ");
                head = deleteFirst (head);
                 printList(head);
                System.out.println();
                
                
                getLength(head);
                 System.out.println();
                
                System.out.println("loop is present or not: ");
                 checkLoop(head);
                 System.out.println();
                
                System.out.println(" adding at certain position (2) : ");
               head =  addCertainPosition (  head , 65242 , 2);
                printList(head);
                System.out.println();
                
                
                System.out.println("deleting at certain position (3): ");
                head = deleteAtCertainPosition ( head   ,  4);
                 printList(head);
                System.out.println();
                
                System.out.println("delete at certain position from last (2): ");
                head = deleteFromLastAtCertainPosition( head , 2);
                printList(head);
                System.out.println();
                
                System.out.println("middle element of the linked list is: ");
                Node mid = middleElement (  head );
                System.out.println(mid . x);
                
                
        }
        
        
        public static void printList(Node head){
                if(head == null){
                        return;
                }
                while(head != null){
                        System.out.print(head.x + " ");
                        head = head.next;
                }
        }
        
        
        public static Node reverseGroup ( Node head , int k){
                Node curr = head;
                Node prev = null;
              int count = 0;
                
                while(count<k   &&   curr != null){
                        Node temp = curr.next;
                        curr.next = prev;
                        prev = curr;
                        curr = temp;
                        
                        count++;
                }
                if(prev != null){
                        head.next =reverseGroup (curr , k);
                        return prev;
                }
                return prev;
        }
        
    
        
        public static Node reverse(Node head){
                Node curr = head;
                Node prev = null;
                
                while( curr != null){
                        Node temp = curr.next;
                        curr.next = prev;
                        prev = curr;
                        curr = temp;
                }
                return prev;
        }
        
      public static Node addLast(Node head , int k){
              if (head == null){
                      head = new Node(k);
              }
              else{
                      Node temp = head;
                      while(temp.next != null){
                              temp = temp.next;
                      }
                      temp.next = new Node(k);
                      
              }
              return head;
      }  
        
        
        
        public static void deleteLast (Node head){
                if(head == null){
                        return;
                }
                else{
                        Node prev = null;
                        Node curr = head;
                        
                        while(curr.next != null){
                                prev = curr;
                                curr = curr.next;
                        }
                        prev.next = null;
                }
        }
        
        public static Node addFirst ( Node head , int k){
                Node newNode = new Node(k);
                newNode.next = head;
                head = newNode;
                return head;
        }
        
        
        public static Node deleteFirst ( Node head  ){
                head = head.next;
                return head;
        }
        
        
        
        public static void getLength ( Node head ){
                int count = 0;
                while(head != null){
                        head = head.next;
                        count ++;
                }
                System.out.println( "length of the linked list is : " +  count);
        }
        
        
        
        public static void checkLoop ( Node head ){
                if(head == null){
                        System.out.println(" NO LOOP ");
                }
                
                Node slow = head;
                Node fast = head;
                
                while(slow != null  &&  slow.next != null   &&  fast.next != null  &&   fast != null){
                        slow = slow.next;
                        fast = fast.next.next;
                                
                                if(slow == fast){
                                        System.out.println(" LOOP PRESENT ");
                                        return;
                                       
                                }
                        else{
                                System.out.println("NO LOOP");
                                return;
                        }
                }
             
        }
        
       
        public static Node addCertainPosition ( Node head , int k , int pos){
                Node newNode = new Node(k);
                Node curr = head;
                
                for(int i=1;   i<pos-1;   i++){
                        curr = curr.next;
                }
                
                newNode.next = curr.next;
                curr.next = newNode;
                return head;
        }
        
        public static Node deleteAtCertainPosition ( Node head  ,  int pos){
                Node curr = head;
                
                for(int i=1;   i<pos-1;   i++){
                        curr = curr . next;
                }
                curr.next = curr.next.next;
                return head;
        }
        
        
        public static Node deleteFromLastAtCertainPosition(Node head , int pos){
                Node start = head;
                
                Node slow = start;
                Node fast = start;
                
                for(int i=0;  i<=pos;   i++){
                        slow = slow.next;
                        fast = fast.next;
                }
                slow.next = slow.next.next;
                return head;
        }
        
        public static Node middleElement ( Node head ){
                Node slow = head;
                Node fast = head;
                
                while(fast != null  &&  fast.next != null){
                        slow = slow.next;
                        fast = fast.next.next;
                }
                return slow;
        }
        
        
        
}



output = 
given linked list is:
1 2 3 4 5 6 
reverse in k group: 
3 2 1 6 5 4 
reversed list is: 
4 5 6 1 2 3 
adding at last posiition:
4 5 6 1 2 3 74638 
after deleting at last position: 
4 5 6 1 2 3 
adding at first position : 
73255 4 5 6 1 2 3 
deleting at first position : 
4 5 6 1 2 3 
length of the linked list is : 6

loop is present or not: 
NO LOOP

 adding at certain position (2) : 
4 65242 5 6 1 2 3 
deleting at certain position (3): 
4 65242 5 1 2 3 
delete at certain position from last (2): 
4 65242 5 1 3 
middle element of the linked list is: 
5        